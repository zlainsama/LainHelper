package lain.mods.helper;

import java.util.Arrays;
import net.minecraft.block.Block;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemAxe;
import net.minecraft.item.ItemStack;
import net.minecraft.item.ItemSword;
import net.minecraft.item.ItemTool;
import net.minecraftforge.common.Configuration;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.ForgeSubscribe;
import net.minecraftforge.event.entity.living.LivingAttackEvent;
import net.minecraftforge.event.entity.living.LivingHurtEvent;
import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;
import cpw.mods.fml.common.DummyModContainer;
import cpw.mods.fml.common.LoadController;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLServerStartingEvent;

public class LainHelper extends DummyModContainer
{

    public class a
    {

        private a()
        {
            MinecraftForge.EVENT_BUS.register(this);
        }

        @ForgeSubscribe
        public void b(LivingAttackEvent event)
        {
            String a = event.source.getDamageType();
            if (checkOwner(event.entity))
            {
                if ("fall".equalsIgnoreCase(a))
                    event.setCanceled(true);
                else if ("arrow".equalsIgnoreCase(a) && Math.random() > 0.5D)
                    event.setCanceled(true);
            }
        }

        @ForgeSubscribe
        public void b(LivingHurtEvent event)
        {
            String a = event.source.getDamageType();
            if (checkOwner(event.entity))
            {
                if (Math.random() > 0.5D)
                    event.ammount *= 0.5F;
            }
            else if (checkOwner(event.source.getEntity()))
            {
                if ("arrow".equalsIgnoreCase(a))
                    event.ammount *= 3.0F;
                else if ("player".equalsIgnoreCase(a))
                {
                    ItemStack b = ((EntityPlayer) event.source.getEntity()).getCurrentEquippedItem();
                    if (b == null)
                        event.ammount += 3.0F;
                    else if (b.getItem() instanceof ItemSword)
                        event.ammount += 8.0F;
                    else if (b.getItem() instanceof ItemAxe)
                        event.ammount += 4.0F;
                    else if (b.getItem() instanceof ItemTool)
                        event.ammount += 2.0F;
                }
            }
        }

    }

    public static int idBlockWaterCube;
    public static int idBlockCobbleCube;

    public static Block blockWaterCube;
    public static Block blockCobbleCube;

    public static int customLANPort;
    public static boolean enableHelperCommands;

    public static CommonProxy proxy;

    private static boolean checkOwner(Object obj)
    {
        if (obj instanceof String)
            return "zlainsama".equalsIgnoreCase((String) obj);
        if (obj instanceof EntityPlayer)
            return checkOwner(((EntityPlayer) obj).username);
        // if (obj instanceof EntityTameable)
        // return checkOwner(((EntityTameable) obj).getOwnerName());
        return false;
    }

    public LainHelper()
    {
        super(new ModMetadata());
        getMetadata();
    }

    @Override
    public ModMetadata getMetadata()
    {
        ModMetadata md = super.getMetadata();
        md.modId = "LainHelper";
        md.name = "LainHelper";
        md.version = "1.6.x-v26";
        md.authorList = Arrays.asList("zlainsama");
        md.autogenerated = false;
        return md;
    }

    @Subscribe
    public void init(FMLPreInitializationEvent event)
    {
        proxy = event.getSide().isClient() ? new ClientProxy() : new CommonProxy();
        try
        {
            Configuration config = new Configuration(event.getSuggestedConfigurationFile());

            idBlockWaterCube = config.getBlock("blockWaterCube", 3761).getInt(3761);
            idBlockCobbleCube = config.getBlock("blockCobbleCube", 3762).getInt(3762);
            customLANPort = config.get(Configuration.CATEGORY_GENERAL, "CustomLANPort", 25565).getInt(25565);
            enableHelperCommands = config.get(Configuration.CATEGORY_GENERAL, "EnableHelperCommands", true).getBoolean(true);

            config.save();
        }
        catch (Exception e)
        {
            event.getModLog().severe(String.format("ERROR loading config: %s", e.toString()));
        }
    }

    @Subscribe
    public void load(FMLInitializationEvent event)
    {
        new a();
        proxy.load(event);
    }

    @Subscribe
    public void onServerStarting(FMLServerStartingEvent event)
    {
        proxy.load(event);
    }

    @Override
    public boolean registerBus(EventBus bus, LoadController controller)
    {
        bus.register(this);
        return true;
    }

}
